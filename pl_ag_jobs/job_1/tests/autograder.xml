<sprites app="Snap! 9.0, https://snap.berkeley.edu" version="2"><blocks><palette><category name="Autograder" color="9,0,179,1"/><category name="Autograder Utils" color="194,0,51,1"/><category name="tests" color="0,204,13,1"/><category name="Fractal" color="0,116,143,1"/></palette><block-definition s="error %&apos;msg&apos;" type="command" category="control"><comment x="0" y="0" w="268.6666666666667" collapsed="false">Throw an error.&#xD;&#xD;Makes a red halo appear around the script that runs it,&#xD;with the input text shown in a speech balloon next to&#xD;the script, just like any Snap! error.&#xD;&#xD;This is useful to put in the second script of SAFELY TRY&#xD;after some other instructions to undo the partial work of&#xD;the first script.</comment><header></header><code></code><translations>pt:lança o erro _&#xD;</translations><inputs><input type="%txt"></input></inputs><script><block s="doApplyExtension"><l>err_error(msg)</l><list><block var="msg"/></list></block></script></block-definition><block-definition s="safely try %&apos;action&apos; then if %&apos;error&apos; %&apos;handler&apos;" type="command" category="control"><comment x="0" y="0" w="276" collapsed="false">Catch errors.&#xD;&#xD;Runs the first script.  If it succeeds, nothing else happens.&#xD;But if it has an error (something that would otherwise result&#xD;in a red halo around the block), then the second script is run,&#xD;with the text of the error message that would have been shown in the variable ERROR.</comment><header></header><code></code><translations>pt:tenta executar _ e, em caso de erro _ , executa _&#xD;ca:prova de forma segura _ i si _ _&#xD;</translations><inputs><input type="%cs"></input><input type="%upvar"></input><input type="%cs"></input></inputs><script><block s="doApplyExtension"><l>err_try(cmd, catch, err)</l><list><block var="action"/><block var="handler"/><block var="error"/></list></block><block s="doApplyExtension"><l>err_reset</l><list></list></block></script></block-definition><block-definition s="repeat %&apos;action&apos; until %&apos;pred&apos;" type="command" category="control"><comment x="0" y="0" w="202.66666666666666" collapsed="false">Like the built-in REPEAT UNTIL block, except that the ending condition is not tested until the script has been run the first time.  So the script is run at least once.</comment><header></header><code></code><translations>pt:repete _ até que _ $loop-0.7&#xD;ca:repeteix _ fins _&#xD;</translations><inputs><input type="%cs"></input><input type="%boolUE"></input></inputs><script><block s="doRun"><block var="action"/><list></list></block><block s="doUntil"><block s="evaluate"><block var="pred"/><list></list></block><script><block s="doRun"><block var="action"/><list></list></block></script></block></script></block-definition><block-definition s="cascade until %&apos;pred&apos; %&apos;function&apos; %&apos;init&apos; %&apos;#&apos;" type="reporter" category="control"><comment x="0" y="0" w="210.47493489583334" collapsed="false">Call f(f(f(...(f(x))))) until condition is true, where the three input slots are condition, f, and x from left to right.  The # variable can be used inside f or condition to indicate how many times f has been called.</comment><header></header><code></code><translations>pt:o resultado da invocação em cascata até que _ de _ com argumento inicial _ _&#xD;ca:en cascada fins _ _ _ _&#xD;</translations><inputs><input type="%predRing"></input><input type="%repRing"></input><input type="%s"></input><input type="%upvar"></input></inputs><script><block s="doDeclareVariables"><list><l>result</l></list></block><block s="doSetVar"><l>result</l><block var="init"/></block><block s="doSetVar"><l>#</l><l>0</l></block><block s="doUntil"><block s="evaluate"><block var="pred"/><list><block var="result"/></list></block><script><block s="doChangeVar"><l>#</l><l>1</l></block><block s="doSetVar"><l>result</l><block s="evaluate"><block var="function"/><list><block var="result"/></list></block></block></script></block><block s="doReport"><block var="result"/></block></script></block-definition><block-definition s="cascade %&apos;num&apos; times %&apos;function&apos; %&apos;init&apos; %&apos;#&apos;" type="reporter" category="control"><comment x="0" y="0" w="138" collapsed="false">Call f(f(f(...(f(x))))) n times where the three input slots are n, f, and x from left to right.  The # variable can be used inside f to represent how many times f has been called.</comment><header></header><code></code><translations>pt:o resultado de _ invocações em cascata de _ com argumento inicial _ _&#xD;ca:en cascada _ vegades _ _ _&#xD;</translations><inputs><input type="%n"></input><input type="%repRing"></input><input type="%s"></input><input type="%upvar"></input></inputs><script><block s="doDeclareVariables"><list><l>result</l></list></block><block s="doSetVar"><l>result</l><block var="init"/></block><block s="doSetVar"><l>#</l><l>0</l></block><block s="doRepeat"><block var="num"/><script><block s="doChangeVar"><l>#</l><l>1</l></block><block s="doSetVar"><l>result</l><block s="evaluate"><block var="function"/><list><block var="result"/></list></block></block></script></block><block s="doReport"><block var="result"/></block></script></block-definition><block-definition s="repeat %&apos;action&apos; while %&apos;pred&apos;" type="command" category="control"><comment x="0" y="0" w="287.3333333333333" collapsed="false">Run the script repeatedly, as long as the given condition is true.  Runs the script at least once before testing the condition.</comment><header></header><code></code><translations>pt:repete _ enquanto _ $loop-0.7&#xD;ca:repeteix _ mentre _&#xD;</translations><inputs><input type="%cs"></input><input type="%boolUE"></input></inputs><script><block s="doRun"><block var="action"/><list></list></block><block s="doUntil"><block s="reportNot"><block s="evaluate"><block var="pred"/><list></list></block></block><script><block s="doRun"><block var="action"/><list></list></block></script></block></script></block-definition><block-definition s="repeat while %&apos;pred&apos; %&apos;action&apos;" type="command" category="control"><comment x="0" y="0" w="264" collapsed="false">Runs the script repeatedly, as long as the condition is true. Tests the condition before the first time the script is run.  Like the built in REPEAT UNTIL except that in this block the condition must be true, not false.</comment><header></header><code></code><translations>pt:enquanto _ , repete _ $loop-0.7&#xD;</translations><inputs><input type="%boolUE"></input><input type="%cs"></input></inputs><script><block s="doUntil"><block s="reportNot"><block s="evaluate"><block var="pred"/><list></list></block></block><script><block s="doRun"><block var="action"/><list></list></block></script></block></script></block-definition><block-definition s="repeat %&apos;num&apos; %&apos;#&apos; %&apos;action&apos;" type="command" category="control"><comment x="0" y="0" w="171" collapsed="false">Runs the script the specified number of times, like the built-in REPEAT block, but this one provides the # variable that can be used inside the script.  Try&#xD;REPEAT (200)&#xD;                MOVE (#) STEPS&#xD;   RIGHT 92&#xD;with the pen down.</comment><header></header><code></code><translations>pt:repete _ vezes _ _ $loop-0.7&#xD;ca:repeteix _ _ _&#xD;</translations><inputs><input type="%n"></input><input type="%upvar"></input><input type="%cs"></input></inputs><script><block s="doSetVar"><l>#</l><l>0</l></block><block s="doRepeat"><block var="num"/><script><block s="doChangeVar"><l>#</l><l>1</l></block><block s="doRun"><block var="action"/><list></list></block></script></block></script></block-definition><block-definition s="for %&apos;i&apos; = %&apos;start&apos; step %&apos;step&apos; to %&apos;end&apos; %&apos;action&apos;" type="command" category="control"><comment x="0" y="0" w="247.33333333333334" collapsed="false">The primitive FOR block uses an implicit step of ±1 depending on which of the starting and ending values is larger.  This version allows you to provide an explicit step value.  If the sign of the step input is incompatible with the ordering of the starting and ending values, the script will not be run at all.</comment><header></header><code></code><translations>pt:para _ de _ com passo _ a _ _ $loop-0.7&#xD;ca:per _ = _ incrementant _ fins _ _&#xD;</translations><inputs><input type="%upvar"></input><input type="%n">1</input><input type="%n">1</input><input type="%n">10</input><input type="%cs"></input></inputs><script><block s="doDeclareVariables"><list><l>test</l></list></block><block s="doSetVar"><l>i</l><block var="start"/></block><block s="doIfElse"><block s="reportVariadicLessThan"><list><block var="step"/><l>0</l></list></block><script><block s="doSetVar"><l>test</l><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><list><block var="i"/><block var="end"/></list></block></autolambda><list></list></block></block></script><script><block s="doSetVar"><l>test</l><block s="reifyPredicate"><autolambda><block s="reportVariadicGreaterThan"><list><block var="i"/><block var="end"/></list></block></autolambda><list></list></block></block></script></block><block s="doUntil"><block s="evaluate"><block var="test"/><list></list></block><script><block s="doRun"><block var="action"/><list></list></block><block s="doChangeVar"><l>i</l><block var="step"/></block></script></block></script></block-definition><block-definition s="let %&apos;a&apos; be %&apos;val&apos; in %&apos;loop&apos; %&apos;body&apos;" type="command" category="control"><comment x="0" y="0" w="238.66666666666666" collapsed="false">Provides LOOP as a function of one input that runs&#xD;the body of the LET with A set to the function input,&#xD;so the body can run itself recursively.&#xD;See COPY block in Variables for an example of use.</comment><header></header><code></code><translations>pt:tendo _ o valor inicial _ , executa _ definido como _&#xD;ca:fes que _ sigui _ al _ _&#xD;</translations><inputs><input type="%upvar"></input><input type="%s"></input><input type="%upvar"></input><input type="%cs"></input></inputs><script><block s="doSetVar"><l>a</l><block var="val"/></block><block s="doSetVar"><l>loop</l><block s="reifyScript"><script><block s="doSetVar"><l>a</l><block var="new value"/></block><block s="doRun"><block var="body"/><list><block var="a"/></list></block></script><list><l>new value</l></list></block></block><block s="doRun"><block var="loop"/><list><block var="a"/></list></block></script></block-definition><block-definition s="%&apos;#&apos; for each %&apos;item&apos; of %&apos;data&apos; %&apos;action&apos;" type="command" category="lists"><comment x="0" y="0" w="228.57142857142858" collapsed="false">This block carries out the given script for each item of the given list, like the primitive FOR EACH.&#xD;&#xD;What&apos;s different is that it provides the # variable, which will contain the item number in the list of each item in turn, 1 while processing item 1, and so on.</comment><header></header><code></code><translations>ca:_ per cada _ de _ _&#xD;</translations><inputs><input type="%upvar"></input><input type="%upvar"></input><input type="%l"></input><input type="%ca"></input></inputs><script><block s="doForEach"><l>inner item</l><block var="data"/><script><block s="doSetVar"><l>item</l><block var="inner item"/></block><block s="doChangeVar"><l>#</l><l>1</l></block><block s="doRun"><block var="action"/><list></list></block></script></block></script></block-definition><block-definition s="multimap %&apos;function&apos; over %&apos;lists&apos;" type="reporter" category="lists"><comment x="0" y="0" w="267.3333333333333" collapsed="false">Takes as input a function of N inputs and N lists.&#xD;The function is called with item 1 of all the lists as its inputs, with item 2 of all the lists as its inputs, and so on.  (The lists should all be the same length.)</comment><header></header><code></code><translations>ca:multi-mapeja _ sobre _&#xD;</translations><inputs><input type="%repRing"></input><input type="%mult%l"></input></inputs><script><block s="doReport"><block s="reportMap"><block s="reifyReporter"><autolambda><block s="evaluate"><block var="function"/><custom-block s="%s"><l></l></custom-block></block></autolambda><list></list></block><custom-block s="$flash zip %mult%l"><block var="lists"/></custom-block></block></block></script></block-definition><block-definition s="%&apos;x&apos;" type="reporter" category="lists"><comment x="0" y="0" w="105.33333333333333" collapsed="false">The identity function reports its input.</comment><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doReport"><block var="x"/></block></script></block-definition><block-definition s="$flash zip %&apos;lists&apos;" type="reporter" category="lists"><comment x="0" y="0" w="192" collapsed="false">ZIP takes any number of lists as inputs.  The lists should all be the same length.  ZIP reports a list of lists in which the first item is a list of all the first items, the second item is a list of all the second items, etc.&#xD;Viewing the inputs as the rows of a matrix, ZIP reports its transpose.</comment><header></header><code></code><translations></translations><inputs><input type="%mult%l"></input></inputs><script><block s="doReport"><block s="reportListAttribute"><l><option>columns</option></l><block var="lists"/></block></block></script></block-definition><block-definition s="safely try reporting %&apos;this&apos; then if %&apos;error&apos; report %&apos;that&apos;" type="reporter" category="control"><comment x="0" y="0" w="316.6666666666667" collapsed="false">Catch errors in a reporter.&#xD;&#xD;Evaluates its first input.  If that expression successfully reports a value, this block reports that value.  If the expression causes a Snap! error,&#xD;then the final input slot is evaluated with the text of what would have&#xD;been the error message in variable ERROR.  SAFELY TRY then reports the value of that final expression.&#xD;&#xD;Sometimes you&apos;ll want to throw an error in the final expression.  You&#xD;can put an ERROR block inside a CALL block to do that.</comment><header></header><code></code><translations>ca:prova de forma segura reportant _ i si _ reportant _&#xD;</translations><inputs><input type="%anyUE"></input><input type="%upvar"></input><input type="%anyUE"></input></inputs><script><block s="doDeclareVariables"><list><l>value</l></list></block><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doSetVar"><l>value</l><block s="evaluate"><block var="this"/><list></list></block></block></script><l>err</l><script><block s="doSetVar"><l>error</l><block var="err"/></block><block s="doSetVar"><l>value</l><block s="evaluate"><block var="that"/><list></list></block></block></script></custom-block><block s="doReport"><block var="value"/></block></script></block-definition><block-definition s="if %&apos;test&apos; then %&apos;true&apos; else %&apos;false&apos;" type="reporter" category="control"><header></header><code></code><translations>de:wenn _ dann _ sonst _&#xD;ca:si _ llavors _ si no _&#xD;es:si _ entonces _ sino _&#xD;fr:si _ alors _ sinon _&#xD;</translations><inputs><input type="%b"></input><input type="%anyUE"></input><input type="%anyUE"></input></inputs><script><block s="doIfElse"><block var="test"/><script><block s="doReport"><block s="evaluate"><block var="true"/><list></list></block></block></script><script><block s="doReport"><block s="evaluate"><block var="false"/><list></list></block></block></script></block></script></block-definition><block-definition s="move %&apos;len&apos; Bold= %&apos;bold?&apos;" type="command" category="motion"><header></header><code></code><translations></translations><inputs><input type="%n">100</input><input type="%b"></input></inputs><script><block s="doDeclareVariables"><list><l>PenDown?</l></list></block><block s="doSetVar"><l>PenDown?</l><block s="getPenDown"></block></block><block s="doSetVar"><l>bold?</l><block s="reportBoolean"><l><bool>false</bool></l></block></block><block s="doWarp"><script><block s="doIf"><block var="bold?"/><script><block s="changeSize"><l>3</l></block></script><list></list></block><block s="forward"><block var="len"/></block><block s="doIf"><block var="bold?"/><script><block s="changeSize"><l>-3</l></block></script><list></list></block></script></block></script><scripts><script x="27" y="336.5833333333333"><block s="doIf"><block var="PenDown?"/><script><block s="down"></block></script><list></list></block></script><script x="141" y="329.75"><block s="doIf"><block var="PenDown?"/><script><block s="up"></block></script><list></list></block></script><script x="197.83072916666666" y="109.91666666666666"><block var="PenDown?"/></script></scripts></block-definition><block-definition s="Emitter Recurse if %&apos;test&apos; n= %&apos;n&apos; len= %&apos;len&apos; version= %&apos;version&apos; Bold= %&apos;bold&apos;" type="command" category="pen"><header></header><code></code><translations></translations><inputs><input type="%b"></input><input type="%n"></input><input type="%n"></input><input type="%n"></input><input type="%b"></input></inputs><script><block s="doDeclareVariables"><list><l>smaller len</l></list></block><block s="doSetVar"><l>smaller len</l><block s="reportQuotient"><block var="len"/><l>2</l></block></block><block s="doIfElse"><block var="test"/><script><custom-block s="2023Fa Midterm Fractal n= %n steps len= %n version= %n"><block s="reportDifference"><block var="n"/><l>1</l></block><block var="smaller len"/><block var="version"/></custom-block></script><script><custom-block s="move %n Bold= %b"><block var="smaller len"/><block var="bold"/></custom-block><block s="up"></block><block s="forward"><block s="reportMonadic"><l><option>neg</option></l><block var="smaller len"/></block></block><block s="down"></block></script></block></script><scripts><script x="250" y="90.26666666666672"><block s="reportQuotient"><block var="len"/><block s="reportVariadicSum"><list><block s="reportMonadic"><l><option>sqrt</option></l><l>2</l></block><l>1</l></list></block></block></script></scripts></block-definition><block-definition s="2023Fa Midterm Fractal n= %&apos;n&apos; steps len= %&apos;len&apos; version= %&apos;version&apos;" type="command" category="pen"><header></header><code></code><translations></translations><inputs><input type="%n"></input><input type="%n"></input><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>bold</l><l>b7</l><l>b6</l><l>b5</l><l>b4</l><l>b3</l><l>b2</l><l>b1</l><l>b0</l><l>turn90</l><l>turn60</l><l>j</l></list></block><block s="doSetVar"><l>b7</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>128</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b6</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>64</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b5</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>32</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b4</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>16</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b3</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>8</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b2</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>4</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b1</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>2</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b0</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>1</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>bold</l><block s="reportVariadicEquals"><list><block var="n"/><l>1</l></list></block></block><block s="doSetVar"><l>turn90</l><custom-block s="if %b then %anyUE else %anyUE"><block var="b6"/><l>-90</l><l>90</l></custom-block></block><block s="doSetVar"><l>turn60</l><custom-block s="if %b then %anyUE else %anyUE"><block var="b5"/><l>-60</l><l>60</l></custom-block></block><block s="down"></block><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="n"/><l>1</l></list></block><script><custom-block s="move %n Bold= %b"><block var="len"/><block var="bold"/></custom-block><block s="up"></block><block s="forward"><block s="reportMonadic"><l><option>neg</option></l><block var="len"/></block></block><block s="down"></block></script><script><block s="doIf"><block var="b0"/><script><block s="up"></block><block s="forward"><block s="reportQuotient"><block var="len"/><l>2</l></block></block><block s="down"></block></script><list><l><bool>true</bool></l><script><custom-block s="Emitter Recurse if %b n= %n len= %n version= %n Bold= %b"><block var="b1"/><block var="n"/><block var="len"/><block var="version"/><block var="bold"/></custom-block><block s="up"></block><block s="forward"><block s="reportQuotient"><block var="len"/><l>2</l></block></block><block s="down"></block></script></list></block><block s="turn"><block var="turn90"/></block><custom-block s="Emitter Recurse if %b n= %n len= %n version= %n Bold= %b"><block var="b2"/><block var="n"/><block var="len"/><block var="version"/><block var="bold"/></custom-block><block s="turnLeft"><block var="turn90"/></block><block s="doIf"><block var="b3"/><script><block s="up"></block><block s="forward"><block s="reportQuotient"><block var="len"/><l>2</l></block></block><block s="down"></block></script><list><l><bool>true</bool></l><script><custom-block s="Emitter Recurse if %b n= %n len= %n version= %n Bold= %b"><block var="b4"/><block var="n"/><block var="len"/><block var="version"/><block var="bold"/></custom-block><block s="up"></block><block s="forward"><block s="reportQuotient"><block var="len"/><l>2</l></block></block><block s="down"></block></script></list></block><block s="turnLeft"><block var="turn90"/></block><custom-block s="Emitter Recurse if %b n= %n len= %n version= %n Bold= %b"><block var="b5"/><block var="n"/><block var="len"/><block var="version"/><block var="bold"/></custom-block><block s="turn"><block var="turn90"/></block><block s="up"></block><block s="forward"><block s="reportMonadic"><l><option>neg</option></l><block var="len"/></block></block><block s="down"></block></script></block></script></block-definition></blocks><sprite name="autograder" idx="0" x="0" y="1496.7645652619367" heading="0" scale="1" volume="100" pan="0" rotation="1" draggable="true" costume="0" color="30,30,30,1" pen="tip" id="2"><costumes><list struct="atomic" id="3"></list></costumes><sounds><list struct="atomic" id="4"></list></sounds><blocks><block-definition s="set up autograder" type="command" category="Autograder"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>try running?</l><l>blocks</l><l>block</l></list></block><block s="doSetVar"><l>student</l><block s="reportNewList"><list></list></block></block><block s="doSetVar"><l>results</l><l></l></block><block s="doSetVar"><l>tests</l><block s="reportNewList"><list></list></block></block><block s="doSetVar"><l>secret number</l><l>51</l></block><block s="doForEach"><l>item</l><block s="reportNewList"><list><l>Factorial RECURSIVE _</l><l>Factorial ITERATIVE _</l></list></block><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doSetVar"><l>block</l><custom-block s="get block %txt" scope="local"><block var="item"/></custom-block></block><block s="doAddToList"><block var="block"/><block var="student"/></block><block s="doSetVar"><l>try running?</l><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><l>error</l><script><block s="doSetVar"><l>try running?</l><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></custom-block></script></block><block s="doSetVar"><l>tests</l><block s="reportNewList"><list><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: factorial RECURSIVE %s" scope="local"><block s="reportListItem"><l>1</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>10</l></list></block><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: factorial ITERATIVE %s" scope="local"><block s="reportListItem"><l>2</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>10</l></list></block></list></block></block></script><scripts><script x="360.807890625" y="52.39999999999998"><block var="student"/></script><script x="232.69759765624997" y="104.19999999999999"><block s="reportNewList"><list><l>Fractal n= _ length= _</l><l>Factorial RECURSIVE _</l><l>Factorial ITERATIVE _</l></list></block></script></scripts></block-definition><block-definition s="get block %&apos;label&apos;" type="reporter" category="Autograder Utils"><comment x="0" y="0" w="307.23078125000006" collapsed="false">The label of a block is its signature with &quot;_&quot; substituted for any input slot. For example, &quot;find block with label _&quot; is the label of this block.</comment><header></header><code></code><translations></translations><inputs><input type="%txt"></input></inputs><script><block s="doDeclareVariables"><list><l>result</l></list></block><block s="doSetVar"><l>result</l><block s="reportFindFirst"><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><block s="reportBlockAttribute"><l><option>label</option></l><block var="block"/></block><block var="label"/></list></block></autolambda><list><l>block</l></list></block><block s="reportGet"><l><option>blocks</option></l></block></block></block><block s="doIf"><block s="reportIsA"><block var="result"/><l><option>text</option></l></block><script><custom-block s="error %txt"><block s="reportJoinWords"><list><l>Missing block with label: </l><block var="label"/></list></block></custom-block></script><list></list></block><block s="doReport"><block var="result"/></block></script></block-definition><block-definition s="count occurrences of %&apos;block&apos; in %&apos;ast&apos;" type="reporter" category="Autograder Utils"><comment x="0" y="0" w="100.99999999999989" collapsed="false">Count the number of calls of a block in an Abstract Syntax Tree.&#xD;&#xD;The input slots of a block passed in as argument should be blank.</comment><header></header><code></code><translations></translations><inputs><input type="%repRing"></input><input type="%l"></input></inputs><script><block s="doReport"><block s="reportCombine"><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportIfElse"><block s="reportIsA"><block var="value"/><l><option>list</option></l></block><custom-block s="count occurrences of %repRing in %l" scope="local"><block var="block"/><block var="value"/></custom-block><block s="reportIfElse"><block s="reportVariadicEquals"><list><block var="block"/><block var="value"/></list></block><l>1</l><l>0</l></block></block></autolambda><list><l>value</l></list></block><block var="ast"/></block><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l></l></list></block></autolambda><list></list></block></block></block></script></block-definition><block-definition s="%&apos;A&apos; equals %&apos;B&apos; under %&apos;f&apos;" type="reporter" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%cmdRing"></input><input type="%cmdRing"></input><input type="%repRing"></input></inputs><script><block s="doDeclareVariables"><list><l>getA</l><l>getB</l><l>diffA</l><l>diffB</l><l>total difference</l></list></block><block s="doWarp"><script><block s="doSetVar"><l>getA</l><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="evaluate"><block var="f"/><list><block var="A"/></list></block><l>error</l><l>0</l></custom-block></block><block s="doSetVar"><l>getB</l><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="evaluate"><block var="f"/><list><block var="B"/></list></block><l>error</l><l>-1</l></custom-block></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="getA"/><block var="getB"/></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><list><block s="reportVariadicOr"><list><block s="reportVariadicEquals"><list><block var="getA"/><l>0</l></list></block><block s="reportVariadicEquals"><list><block var="getB"/><l>-1</l></list></block></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><l><bool>true</bool></l><script><block s="doReport"><custom-block s="pixel similarity algo A= %s and B= %s" scope="local"><block var="getA"/><block var="getB"/></custom-block></block></script></list></block></script></block></script></block-definition><block-definition s="get pixels of %&apos;fractal&apos; with n= %&apos;n&apos; length= %&apos;length&apos; waiting %&apos;seconds&apos; second(s)" type="reporter" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%cmdRing"></input><input type="%n">5</input><input type="%s">2</input><input type="%n">10</input></inputs><script><block s="doResetTimer"></block><block s="fork"><block s="reifyScript"><script><custom-block s="draw %cmdRing with n= %s length= %s" scope="local"><block var="fractal"/><block var="n"/><block var="length"/></custom-block></script><list></list></block><list></list></block><block s="doWaitUntil"><block s="reportVariadicGreaterThan"><list><block s="getTimer"></block><block var="seconds"/></list></block></block><block s="doStopThis"><l><option>all but this script</option></l></block><block s="doReport"><block s="reportGetImageAttribute"><l><option>pixels</option></l><block s="reportPenTrailsAsCostume"></block></block></block></script></block-definition><block-definition s="draw %&apos;fractal&apos; with n= %&apos;n&apos; length= %&apos;length&apos;" type="command" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%cmdRing"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doWarp"><script><block s="setSize"><l>1</l></block><block s="setColor"><color>30,30,30,1</color></block><block s="down"></block><block s="setHeading"><l>0</l></block><block s="gotoXY"><l>0</l><l>0</l></block><block s="clear"></block><block s="doRun"><block var="fractal"/><list><block var="n"/><block var="length"/></list></block><block s="up"></block></script></block></script></block-definition><block-definition s="Test: ALL tests" type="reporter" category="tests"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>tests</l></list></block><block s="doSetVar"><l>tests</l><block s="reportNewList"><list><custom-block s="Test: correct fractal drawing %s" scope="local"><block var="student"/></custom-block><custom-block s="Test: correct base case condition %s" scope="local"><block var="student"/></custom-block><custom-block s="Test: correct base case drawing %s" scope="local"><block var="student"/></custom-block><custom-block s="Test: correct number of recursive calls %s" scope="local"><block var="student"/></custom-block><custom-block s="Test: correct recursive inputs %s" scope="local"><block var="student"/></custom-block><custom-block s="Test: correct final sprite direction %s" scope="local"><block var="student"/></custom-block></list></block></block><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doIfElse"><block s="reportVariadicAnd"><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportListItem"><l>1</l><l/></block></autolambda><list></list></block><block var="tests"/></block></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></block></script><l>error</l><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></custom-block></script></block-definition><block-definition s="constraints: recursion %&apos;student&apos;" type="predicate" category="Autograder"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>ast</l><l>forbidden blocks</l></list></block><block s="doSetVar"><l>ast</l><block s="reportTextSplit"><block s="reportBlockAttribute"><l><option>definition</option></l><block var="student"/></block><l><option>blocks</option></l></block></block><block s="doSetVar"><l>forbidden blocks</l><block s="reportNewList"><list><block s="reifyReporter"><autolambda><block s="reportMap"><block s="reifyReporter"><script></script><list></list></block><l/></block></autolambda><list></list></block><block s="reifyReporter"><autolambda><block s="reportKeep"><block s="reifyPredicate"><script></script><list></list></block><l/></block></autolambda><list></list></block><block s="reifyReporter"><autolambda><block s="reportFindFirst"><block s="reifyPredicate"><script></script><list></list></block><l/></block></autolambda><list></list></block><block s="reifyReporter"><autolambda><block s="reportCombine"><l/><block s="reifyReporter"><script></script><list></list></block></block></autolambda><list></list></block><block s="reifyScript"><script><block s="doForEach"><l>item</l><l/><script></script></block></script><list></list></block><block s="reifyScript"><script><block s="doFor"><l>i</l><l></l><l></l><script></script></block></script><list></list></block><block s="reifyScript"><script><block s="doUntil"><l/><script></script></block></script><list></list></block><block s="reifyScript"><script><block s="doRepeat"><l></l><script></script></block></script><list></list></block><block s="reifyScript"><script><block s="doCallCC"><block s="reifyScript"><script></script><list></list></block></block></script><list></list></block><block s="reifyScript"><script><custom-block s="repeat %cs until %boolUE"><script></script><l/></custom-block></script><list></list></block><block s="reifyReporter"><autolambda><custom-block s="cascade until %predRing %repRing %s %upvar"><block s="reifyPredicate"><script></script><list></list></block><block s="reifyReporter"><script></script><list></list></block><l></l><l>#</l></custom-block></autolambda><list></list></block><block s="reifyReporter"><autolambda><custom-block s="cascade %n times %repRing %s %upvar"><l></l><block s="reifyReporter"><script></script><list></list></block><l></l><l>#</l></custom-block></autolambda><list></list></block><block s="reifyScript"><script><custom-block s="repeat %cs while %boolUE"><script></script><l/></custom-block></script><list></list></block><block s="reifyScript"><script><custom-block s="repeat while %boolUE %cs"><l/><script></script></custom-block></script><list></list></block><block s="reifyScript"><script><custom-block s="repeat %n %upvar %cs"><l></l><l>#</l><script></script></custom-block></script><list></list></block><block s="reifyScript"><script><custom-block s="for %upvar = %n step %n to %n %cs"><l>i</l><l></l><l></l><l></l><script></script></custom-block></script><list></list></block><block s="reifyScript"><script><custom-block s="let %upvar be %s in %upvar %cs"><l>a</l><l></l><l>loop</l><script></script></custom-block></script><list></list></block><block s="reifyScript"><script><custom-block s="%upvar for each %upvar of %l %ca"><l>#</l><l>item</l><l/><script></script></custom-block></script><list></list></block><block s="reifyReporter"><autolambda><custom-block s="multimap %repRing over %mult%l"><block s="reifyReporter"><script></script><list></list></block><list><l/></list></custom-block></autolambda><list></list></block></list></block></block><block s="doReport"><block s="reportVariadicAnd"><list><block s="reportVariadicGreaterThan"><list><custom-block s="count occurrences of %repRing in %l" scope="local"><block var="student"/><block var="ast"/></custom-block><l>1</l></list></block><block s="reportVariadicEquals"><list><l>0</l><block s="reportCombine"><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="count occurrences of %repRing in %l" scope="local"><block var="block"/><block var="ast"/></custom-block></autolambda><list><l>block</l></list></block><block var="forbidden blocks"/></block><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l></l></list></block></autolambda><list></list></block></block></list></block></list></block></block></script></block-definition><block-definition s="fractal v51 %&apos;levels&apos; %&apos;length&apos;" type="command" category="Fractal"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>new length</l></list></block><block s="doSetVar"><l>new length</l><block s="reportVariadicProduct"><list><block var="length"/><block s="reportQuotient"><l>10</l><l>11</l></block></list></block></block><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="levels"/><l>1</l></list></block><script><block s="forward"><block var="length"/></block></script><script><custom-block s="fractal v51 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><custom-block s="fractal v51 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><custom-block s="fractal v51 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="turn"><l>90</l></block><custom-block s="fractal v51 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><custom-block s="fractal v51 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block></script></block></script></block-definition><block-definition s="fractal v60 %&apos;levels&apos; %&apos;length&apos;" type="command" category="Fractal"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>new length</l></list></block><block s="doSetVar"><l>new length</l><block var="length"/></block><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="levels"/><l>1</l></list></block><script><block s="forward"><block var="length"/></block></script><script><custom-block s="fractal v60 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><custom-block s="fractal v60 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>45</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>45</l></block><custom-block s="fractal v60 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><custom-block s="fractal v60 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block></script></block></script><scripts><script x="239.9189453125" y="93.66666666666669"><block s="reportQuotient"><l></l><l>1.1</l></block></script></scripts></block-definition><block-definition s="fractal v93 %&apos;levels&apos; %&apos;length&apos;" type="command" category="Fractal"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>new length</l></list></block><block s="doSetVar"><l>new length</l><block var="length"/></block><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="levels"/><l>1</l></list></block><script><block s="forward"><block var="length"/></block></script><script><custom-block s="fractal v93 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><custom-block s="fractal v93 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>135</l></block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>135</l></block><custom-block s="fractal v93 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><custom-block s="fractal v93 %s %s" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block></script></block></script></block-definition><block-definition s="Test: correct base case condition %&apos;block&apos;" type="reporter" category="tests"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doIf"><block s="reportNot"><block var="recursively called?"/></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Solution MUST be recursive.</l></list></block></block></script><list></list></block><block s="doIfElse"><block var="fractal matches exactly?"/><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doIfElse"><custom-block s="base case condition %s" scope="local"><block var="block"/></custom-block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></block></script></block></script><l>error</l><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><block var="error"/></list></block></block></script></custom-block></script></block-definition><block-definition s="base case condition %&apos;block&apos;" type="predicate" category="Autograder"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>conditional calls</l><l>tree</l></list></block><block s="doSetVar"><l>tree</l><block s="reportTextSplit"><block s="reportBlockAttribute"><l><option>definition</option></l><block var="block"/></block><l><option>blocks</option></l></block></block><block s="doSetVar"><l>conditional calls</l><block s="reportConcatenatedLists"><list><custom-block s="calls of %s in %s" scope="local"><block s="reifyScript"><script><block s="doIf"><l/><script></script><list></list></block></script><list></list></block><block var="tree"/></custom-block><custom-block s="calls of %s in %s" scope="local"><block s="reifyScript"><script><block s="doIfElse"><l/><script></script><script></script></block></script><list></list></block><block var="tree"/></custom-block></list></block></block><block s="doIf"><block s="reportVariadicLessThan"><list><block s="reportListAttribute"><l><option>length</option></l><block var="conditional calls"/></block><l>1</l></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><list></list></block><block s="doReport"><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="evaluate"><block s="reportJoinWords"><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>n</l><l>1</l><block s="reportListItem"><l>1</l><block s="reportListItem"><l>2</l><block s="reportListAttribute"><l><option>columns</option></l><block var="conditional calls"/></block></block></block></custom-block></block><list></list></block><l>error</l><block s="reportBoolean"><l><bool>false</bool></l></block></custom-block></block></script></block-definition><block-definition s="substitute variable %&apos;name&apos; with value %&apos;value&apos; in %&apos;tree&apos;" type="reporter" category="Autograder"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doIf"><block s="reportNot"><block s="reportIsA"><block var="tree"/><l><option>list</option></l></block></block><script><block s="doReport"><block var="tree"/></block></script><list></list></block><block s="doIf"><block s="reportVariadicAnd"><list><block s="reportVariadicAnd"><list><block s="reportVariadicEquals"><list><block s="reportListAttribute"><l><option>length</option></l><block var="tree"/></block><l>2</l></list></block><block s="reportIsA"><block s="reportListItem"><l>1</l><block var="tree"/></block><l><option>reporter</option></l></block></list></block><block s="reportVariadicEquals"><list><block s="reportBlockAttribute"><l><option>label</option></l><block s="reportJoinWords"><block var="tree"/></block></block><block var="name"/></list></block></list></block><script><block s="doReport"><block var="value"/></block></script><list></list></block><block s="doReport"><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="substitute variable %s with value %s in %s" scope="local"><block var="name"/><block var="value"/><l></l></custom-block></autolambda><list></list></block><block var="tree"/></block></block></script></block-definition><block-definition s="calls of %&apos;block&apos; in %&apos;tree&apos;" type="reporter" category="Autograder"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doIf"><block s="reportVariadicOr"><list><block s="reportNot"><block s="reportIsA"><block var="tree"/><l><option>list</option></l></block></block><block s="reportListIsEmpty"><block var="tree"/></block></list></block><script><block s="doReport"><block s="reportNewList"><list></list></block></block></script><list></list></block><block s="doIf"><block s="reportVariadicEquals"><list><block s="reportListItem"><l>1</l><block var="tree"/></block><block var="block"/></list></block><script><block s="doReport"><block s="reportCONS"><block var="tree"/><custom-block s="calls of %s in %s" scope="local"><block var="block"/><block s="reportCDR"><block var="tree"/></block></custom-block></block></block></script><list></list></block><block s="doReport"><block s="reportConcatenatedLists"><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="calls of %s in %s" scope="local"><block var="block"/><l></l></custom-block></autolambda><list></list></block><block var="tree"/></block></block></block></script></block-definition><block-definition s="Test: correct base case drawing %&apos;block&apos;" type="reporter" category="tests"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doIf"><block s="reportNot"><block var="recursively called?"/></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Solution MUST be recursive.</l></list></block></block></script><list></list></block><block s="doIfElse"><block var="fractal matches exactly?"/><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doIfElse"><custom-block s="%cmdRing equals %cmdRing under %repRing" scope="local"><block var="block"/><block s="reifyScript"><script><custom-block s="base case drawing %s %s" scope="local"><l></l><l></l></custom-block></script><list></list></block><block s="reifyReporter"><autolambda><custom-block s="get pixels of %cmdRing with n= %n length= %s waiting %n second(s)" scope="local"><block s="reifyScript"><script></script><list></list></block><l>1</l><l>50</l><l>10</l></custom-block></autolambda><list></list></block></custom-block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></block></script></block></script><l>error</l><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><block var="error"/></list></block></block></script></custom-block></script><scripts><script x="399.6416015625" y="46.3333333333333"><custom-block s="base case condition %s" scope="local"><block var="block"/></custom-block></script></scripts></block-definition><block-definition s="Midterm Fractal n= %&apos;n&apos; steps len= %&apos;len&apos; version= %&apos;version&apos;" type="command" category="Autograder"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="version"/><l>51</l></list></block><script><custom-block s="draw %cmdRing with n= %s length= %s" scope="local"><block s="reifyScript"><script><custom-block s="fractal v51 %s %s" scope="local"><l></l><l></l></custom-block></script><list></list></block><block var="n"/><block var="len"/></custom-block></script><script><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="version"/><l>60</l></list></block><script><custom-block s="draw %cmdRing with n= %s length= %s" scope="local"><block s="reifyScript"><script><custom-block s="fractal v60 %s %s" scope="local"><l></l><l></l></custom-block></script><list></list></block><block var="n"/><block var="len"/></custom-block></script><script><block s="doIf"><block s="reportVariadicEquals"><list><block var="version"/><l>93</l></list></block><script><custom-block s="draw %cmdRing with n= %s length= %s" scope="local"><block s="reifyScript"><script><custom-block s="fractal v93 %s %s" scope="local"><l></l><l></l></custom-block></script><list></list></block><block var="n"/><block var="len"/></custom-block></script><list></list></block></script></block></script></block></script><scripts><script x="275.21890625000026" y="108.5"><block var="version"/></script><script x="358.92789062500026" y="108.5"><block var="n"/></script><script x="282.21890625000026" y="185.16666666666657"><block var="version"/></script><script x="365.92789062500026" y="185.16666666666657"><block var="n"/></script><script x="289.21890625000026" y="261.8333333333332"><block var="version"/></script><script x="372.92789062500026" y="261.83333333333314"><block var="n"/></script></scripts></block-definition><block-definition s="Test: correct number of recursive calls %&apos;block&apos;" type="reporter" category="tests"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doIf"><block s="reportNot"><block var="recursively called?"/></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Solution MUST be recursive.</l></list></block></block></script><list></list></block><block s="doIfElse"><block var="fractal matches exactly?"/><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doIfElse"><custom-block s="number of recursive calls %s" scope="local"><block var="block"/></custom-block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></block></script></block></script><l>error</l><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><block var="error"/></list></block></block></script></custom-block></script><scripts><script x="312.6416015625" y="104.3333333333333"><custom-block s="base case condition %s" scope="local"><block var="block"/></custom-block></script><script x="372" y="279.16666666666674"><custom-block s="%cmdRing equals %cmdRing under %repRing" scope="local"><block var="block"/><block s="reifyScript"><script><custom-block s="Midterm Fractal n= %s steps len= %s version= %s" scope="local"><l></l><l></l><block var="secret number"/></custom-block></script><list></list></block><block s="reifyReporter"><autolambda><custom-block s="get pixels of %cmdRing with n= %n length= %s waiting %n second(s)" scope="local"><block s="reifyScript"><script></script><list></list></block><l>1</l><l>50</l><l>3</l></custom-block></autolambda><list></list></block></custom-block></script></scripts></block-definition><block-definition s="number of recursive calls %&apos;block&apos;" type="predicate" category="Autograder"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>tree</l></list></block><block s="doSetVar"><l>tree</l><block s="reportTextSplit"><block s="reportBlockAttribute"><l><option>definition</option></l><block var="block"/></block><l><option>blocks</option></l></block></block><block s="doReport"><block s="reportVariadicEquals"><list><block s="reportListAttribute"><l><option>length</option></l><custom-block s="calls of %s in %s" scope="local"><block var="block"/><block var="tree"/></custom-block></block><l>2</l></list></block></block></script><scripts><script x="45" y="161.5"><block s="reportIfElse"><block s="reportVariadicAnd"><list><l/><block s="reportVariadicEquals"><list><l>51</l><block var="secret number"/></list></block></list></block><block s="reportBoolean"><l><bool>true</bool></l></block><block s="reportIfElse"><block s="reportVariadicEquals"><list><block s="reportListAttribute"><l><option>length</option></l><custom-block s="calls of %s in %s" scope="local"><block var="block"/><block var="tree"/></custom-block></block><l>4</l></list></block><block s="reportBoolean"><l><bool>true</bool></l></block><block s="reportBoolean"><l><bool>false</bool></l></block></block></block></script></scripts></block-definition><block-definition s="levels as inputs %&apos;expressions having n&apos;" type="predicate" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doForEach"><l>exp</l><block var="expressions having n"/><script><block s="doFor"><l>levels</l><l>2</l><l>5</l><script><block s="doIf"><block s="reportNot"><block s="reportVariadicEquals"><list><block s="evaluate"><block s="reportJoinWords"><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>n</l><block var="levels"/><block var="exp"/></custom-block></block><list></list></block><block s="reportDifference"><block var="levels"/><l>1</l></block></list></block></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><list></list></block></script></block></script></block><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><l>error</l><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></custom-block></script></block-definition><block-definition s="length as inputs %&apos;expressions having length&apos;" type="predicate" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doForEach"><l>exp</l><block var="expressions having length"/><script><block s="doIf"><block s="reportVariadicOr"><list><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="reportVariadicEquals"><list><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>smaller length</l><block s="reportQuotient"><l>100</l><l>3</l></block><block var="exp"/></custom-block><block s="reportQuotient"><l>100</l><l>3</l></block></list></block><l>error</l><block s="reportBoolean"><l><bool>false</bool></l></block></custom-block><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="reportVariadicEquals"><list><block s="evaluate"><block s="reportJoinWords"><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>length</l><block s="reportQuotient"><l>100</l><l>3</l></block><block var="exp"/></custom-block></block><list></list></block><block s="reportQuotient"><l>100</l><l>3</l></block></list></block><l>error</l><block s="reportBoolean"><l><bool>false</bool></l></block></custom-block><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="reportVariadicEquals"><list><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>length</l><block s="reportQuotient"><l>100</l><l>3</l></block><block var="exp"/></custom-block><block s="reportQuotient"><l>100</l><l>3</l></block></list></block><l>error</l><block s="reportBoolean"><l><bool>false</bool></l></block></custom-block><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="reportVariadicEquals"><list><block s="evaluate"><block s="reportJoinWords"><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>smaller length</l><block s="reportQuotient"><l>100</l><l>3</l></block><block var="exp"/></custom-block></block><list></list></block><block s="reportQuotient"><l>100</l><l>3</l></block></list></block><l>error</l><block s="reportBoolean"><l><bool>false</bool></l></block></custom-block><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="reportVariadicEquals"><list><block s="evaluate"><block s="reportJoinWords"><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>new length</l><block s="reportVariadicProduct"><list><block s="reportQuotient"><l>1</l><l>3</l></block><l>100</l></list></block><block var="exp"/></custom-block></block><list></list></block><block s="reportVariadicProduct"><list><block s="reportQuotient"><l>1</l><l>3</l></block><l>100</l></list></block></list></block><l>error</l><block s="reportBoolean"><l><bool>false</bool></l></block></custom-block><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="reportVariadicEquals"><list><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>length</l><block s="reportVariadicProduct"><list><block s="reportQuotient"><l>1</l><l>3</l></block><l>100</l></list></block><block var="exp"/></custom-block><block s="reportVariadicProduct"><list><block s="reportQuotient"><l>1</l><l>3</l></block><l>100</l></list></block></list></block><l>error</l><block s="reportBoolean"><l><bool>false</bool></l></block></custom-block><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="reportVariadicEquals"><list><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>smaller length</l><block s="reportVariadicProduct"><list><block s="reportQuotient"><l>1</l><l>3</l></block><l>100</l></list></block><block var="exp"/></custom-block><block s="reportVariadicProduct"><list><block s="reportQuotient"><l>1</l><l>3</l></block><l>100</l></list></block></list></block><l>error</l><block s="reportBoolean"><l><bool>false</bool></l></block></custom-block><custom-block s="safely try reporting %anyUE then if %upvar report %anyUE"><block s="reportVariadicEquals"><list><block s="evaluate"><block s="reportJoinWords"><custom-block s="substitute variable %s with value %s in %s" scope="local"><l>length</l><block s="reportVariadicProduct"><list><block s="reportQuotient"><l>1</l><l>3</l></block><l>100</l></list></block><block var="exp"/></custom-block></block><list></list></block><block s="reportVariadicProduct"><list><block s="reportQuotient"><l>1</l><l>3</l></block><l>100</l></list></block></list></block><l>error</l><block s="reportBoolean"><l><bool>false</bool></l></block></custom-block></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><list></list></block></script></block><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><scripts><script x="625.5489062500001" y="1603.4999999999995"><block s="reportVariadicProduct"><list><l>340</l><l>10</l></list></block></script><script x="412" y="33.5"><block s="reportNot"><l/></block></script></scripts></block-definition><block-definition s="recursion inputs correct %&apos;block&apos;" type="predicate" category="Autograder"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>recursive calls</l><l>tree</l></list></block><block s="doSetVar"><l>tree</l><block s="reportTextSplit"><block s="reportBlockAttribute"><l><option>definition</option></l><block var="block"/></block><l><option>blocks</option></l></block></block><block s="doSetVar"><l>recursive calls</l><custom-block s="calls of %s in %s" scope="local"><block var="block"/><block var="tree"/></custom-block></block><block s="doIf"><block s="reportListIsEmpty"><block var="recursive calls"/></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><list></list></block><block s="doReport"><block s="reportVariadicAnd"><list><custom-block s="levels as inputs %s" scope="local"><block s="reportListItem"><l>2</l><block s="reportListAttribute"><l><option>columns</option></l><block var="recursive calls"/></block></block></custom-block><custom-block s="length as inputs %s" scope="local"><block s="reportListItem"><l>3</l><block s="reportListAttribute"><l><option>columns</option></l><block var="recursive calls"/></block></block></custom-block></list></block></block></script></block-definition><block-definition s="get final sprite direction of %&apos;fractal&apos; with n+ %&apos;n&apos; length= %&apos;length&apos; waiting %&apos;seconds&apos;" type="reporter" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%n"></input><input type="%n">10</input><input type="%n">10</input></inputs><script><block s="doResetTimer"></block><block s="fork"><block s="reifyScript"><script><custom-block s="draw %cmdRing with n= %s length= %s" scope="local"><block var="fractal"/><block var="secret number"/><block var="n"/></custom-block></script><list></list></block><list></list></block><block s="doWaitUntil"><block s="reportVariadicGreaterThan"><list><block s="getTimer"></block><block var="seconds"/></list></block></block><block s="doStopThis"><l><option>all but this script</option></l></block><block s="doReport"><block s="direction"></block></block></script></block-definition><block-definition s="final sprite direction %&apos;block&apos;" type="predicate" category="Autograder"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doFor"><l>i</l><l>1</l><l>4</l><script><custom-block s="draw %cmdRing with n= %s length= %s" scope="local"><block var="block"/><block var="i"/><l>2</l></custom-block><block s="doIf"><block s="reportVariadicNotEquals"><list><l>0</l><block s="direction"></block></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><list></list></block></script></block><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></block-definition><block-definition s="Test: correct recursive inputs %&apos;block&apos;" type="reporter" category="tests"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doIf"><block s="reportNot"><block var="recursively called?"/></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Solution MUST be recursive.</l></list></block></block></script><list></list></block><block s="doIfElse"><block var="fractal matches exactly?"/><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doIfElse"><custom-block s="recursion inputs correct %s" scope="local"><block var="block"/></custom-block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></block></script></block></script><l>error</l><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><block var="error"/></list></block></block></script></custom-block></script><scripts><script x="312.6416015625" y="104.3333333333333"><custom-block s="base case condition %s" scope="local"><block var="block"/></custom-block></script></scripts></block-definition><block-definition s="Test: correct final sprite direction %&apos;block&apos;" type="reporter" category="tests"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doIf"><block s="reportNot"><block var="recursively called?"/></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Solution MUST be recursive.</l></list></block></block></script><list></list></block><block s="doIfElse"><block var="fractal matches exactly?"/><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doIfElse"><custom-block s="final sprite direction %s" scope="local"><block var="block"/></custom-block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></block></script></block></script><l>error</l><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><block var="error"/></list></block></block></script></custom-block></script><scripts><script x="312.6416015625" y="104.3333333333333"><custom-block s="base case condition %s" scope="local"><block var="block"/></custom-block></script><script x="372" y="279.1666666666667"><custom-block s="%cmdRing equals %cmdRing under %repRing" scope="local"><block var="block"/><block s="reifyScript"><script><custom-block s="Midterm Fractal n= %s steps len= %s version= %s" scope="local"><l></l><l></l><block var="secret number"/></custom-block></script><list></list></block><block s="reifyReporter"><autolambda><custom-block s="get pixels of %cmdRing with n= %n length= %s waiting %n second(s)" scope="local"><block s="reifyScript"><script></script><list></list></block><l>1</l><l>50</l><l>3</l></custom-block></autolambda><list></list></block></custom-block></script></scripts></block-definition><block-definition s="Test: correct fractal drawing %&apos;block&apos;" type="reporter" category="tests"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doIf"><block s="reportNot"><block var="recursively called?"/></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Solution MUST be recursive.</l></list></block></block></script><list></list></block><block s="doIfElse"><custom-block s="%cmdRing equals %cmdRing under %repRing" scope="local"><block var="block"/><block s="reifyScript"><script><custom-block s="fractal v51 %s %s" scope="local"><l></l><l></l></custom-block></script><list></list></block><block s="reifyReporter"><autolambda><custom-block s="get pixels of %cmdRing with n= %n length= %s waiting %n second(s)" scope="local"><block s="reifyScript"><script></script><list></list></block><l>5</l><l>5</l><l>60</l></custom-block></autolambda><list></list></block></custom-block><script><block s="doSetVar"><l>fractal matches exactly?</l><block s="reportBoolean"><l><bool>true</bool></l></block></block><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doSetVar"><l>fractal matches exactly?</l><block s="reportBoolean"><l><bool>false</bool></l></block></block><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></block></script><l>error</l><script><block s="doSetVar"><l>fractal matches exactly?</l><block s="reportBoolean"><l><bool>false</bool></l></block></block><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><block var="error"/></list></block></block></script></custom-block></script></block-definition><block-definition s="isRecursive %&apos;block&apos;" type="reporter" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%cmdRing"></input></inputs><script><block s="doReport"><block s="reportVariadicGreaterThan"><list><custom-block s="count occurrences of %repRing in %l" scope="local"><block var="block"/><block s="reportTextSplit"><block s="reportBlockAttribute"><l><option>definition</option></l><block var="block"/></block><l><option>blocks</option></l></block></custom-block><l>0</l></list></block></block></script></block-definition><block-definition s="fractal v93 %&apos;levels&apos; %&apos;length&apos; (2)" type="command" category="Fractal"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>new length</l></list></block><block s="doSetVar"><l>new length</l><block var="length"/></block><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="levels"/><l>1</l></list></block><script><block s="forward"><block var="length"/></block></script><script><custom-block s="fractal v93 %s %s (2)" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><custom-block s="fractal v93 %s %s (2)" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>135</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>270</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>135</l></block><custom-block s="fractal v93 %s %s (2)" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turnLeft"><l>90</l></block><block s="forward"><block var="length"/></block><block s="turn"><l>90</l></block><custom-block s="fractal v93 %s %s (2)" scope="local"><block s="reportDifference"><block var="levels"/><l>1</l></block><block var="new length"/></custom-block></script></block></script></block-definition><block-definition s="base case drawing %&apos;levels&apos; %&apos;length&apos;" type="command" category="Fractal"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="forward"><block var="length"/></block></script></block-definition><block-definition s="2023Fa Midterm Fractal n= %&apos;n&apos; len= %&apos;len&apos; version= %&apos;version&apos;" type="command" category="Fractal"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>bold</l><l>b7</l><l>b6</l><l>b5</l><l>b4</l><l>b3</l><l>b2</l><l>b1</l><l>b0</l><l>turn90</l><l>turn60</l><l>j</l></list></block><block s="doSetVar"><l>b7</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>128</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b6</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>64</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b5</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>32</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b4</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>16</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b3</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>8</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b2</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>4</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b1</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>2</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>b0</l><block s="reportVariadicEquals"><list><block s="reportModulus"><block s="reportMonadic"><l><option>floor</option></l><block s="reportQuotient"><block var="version"/><l>1</l></block></block><l>2</l></block><l>1</l></list></block></block><block s="doSetVar"><l>bold</l><block s="reportVariadicEquals"><list><block var="n"/><l>1</l></list></block></block><block s="doSetVar"><l>turn90</l><custom-block s="if %b then %anyUE else %anyUE"><block var="b6"/><l>-90</l><l>90</l></custom-block></block><block s="doSetVar"><l>turn60</l><custom-block s="if %b then %anyUE else %anyUE"><block var="b5"/><l>-60</l><l>60</l></custom-block></block><block s="down"></block><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="n"/><l>1</l></list></block><script><custom-block s="move %n Bold= %b"><block var="len"/><block var="bold"/></custom-block><block s="up"></block><block s="forward"><block s="reportMonadic"><l><option>neg</option></l><block var="len"/></block></block><block s="down"></block></script><script><block s="doIf"><block var="b0"/><script><block s="up"></block><block s="forward"><block s="reportQuotient"><block var="len"/><l>2</l></block></block><block s="down"></block></script><list><l><bool>true</bool></l><script><custom-block s="Emitter Recurse if %b n= %n len= %n version= %n Bold= %b"><block var="b1"/><block var="n"/><block var="len"/><block var="version"/><block var="bold"/></custom-block><block s="up"></block><block s="forward"><block s="reportQuotient"><block var="len"/><l>2</l></block></block><block s="down"></block></script></list></block><block s="turn"><block var="turn90"/></block><custom-block s="Emitter Recurse if %b n= %n len= %n version= %n Bold= %b"><block var="b2"/><block var="n"/><block var="len"/><block var="version"/><block var="bold"/></custom-block><block s="turnLeft"><block var="turn90"/></block><block s="doIf"><block var="b3"/><script><block s="up"></block><block s="forward"><block s="reportQuotient"><block var="len"/><l>2</l></block></block><block s="down"></block></script><list><l><bool>true</bool></l><script><custom-block s="Emitter Recurse if %b n= %n len= %n version= %n Bold= %b"><block var="b4"/><block var="n"/><block var="len"/><block var="version"/><block var="bold"/></custom-block><block s="up"></block><block s="forward"><block s="reportQuotient"><block var="len"/><l>2</l></block></block><block s="down"></block></script></list></block><block s="turnLeft"><block var="turn90"/></block><custom-block s="Emitter Recurse if %b n= %n len= %n version= %n Bold= %b"><block var="b5"/><block var="n"/><block var="len"/><block var="version"/><block var="bold"/></custom-block><block s="turn"><block var="turn90"/></block><block s="up"></block><block s="forward"><block s="reportMonadic"><l><option>neg</option></l><block var="len"/></block></block><block s="down"></block></script></block></script></block-definition><block-definition s="pixel similarity algo A= %&apos;getA&apos; and B= %&apos;getB&apos;" type="predicate" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>total difference</l><l>emptyA</l><l>emptyB</l></list></block><block s="doSetVar"><l>total difference</l><block s="reportNewList"><list></list></block></block><block s="doSetVar"><l>emptyA</l><block s="reportNewList"><list></list></block></block><block s="doSetVar"><l>emptyB</l><block s="reportNewList"><list></list></block></block><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doFor"><l>i</l><l>1</l><block s="reportVariadicMax"><list><block s="reportListAttribute"><l><option>length</option></l><block var="getA"/></block><block s="reportListAttribute"><l><option>length</option></l><block var="getB"/></block></list></block><script><block s="doIf"><block s="reportVariadicOr"><list><block s="reportVariadicAnd"><list><block s="reportVariadicEquals"><list><block s="reportListItem"><block var="i"/><block var="getA"/></block><l></l></list></block><block s="reportVariadicNotEquals"><list><block s="reportListItem"><block var="i"/><block var="getB"/></block><block s="reportNewList"><list><l>0</l><l>0</l><l>0</l><l>0</l></list></block></list></block><block s="reportVariadicNotEquals"><list><block s="reportListItem"><block var="i"/><block var="getA"/></block><block s="reportListItem"><block var="i"/><block var="getB"/></block></list></block></list></block><block s="reportVariadicAnd"><list><block s="reportVariadicEquals"><list><block s="reportListItem"><block var="i"/><block var="getB"/></block><l></l></list></block><block s="reportVariadicNotEquals"><list><block s="reportListItem"><block var="i"/><block var="getA"/></block><block s="reportNewList"><list><l>0</l><l>0</l><l>0</l><l>0</l></list></block></list></block><block s="reportVariadicNotEquals"><list><block s="reportListItem"><block var="i"/><block var="getA"/></block><block s="reportListItem"><block var="i"/><block var="getB"/></block></list></block></list></block></list></block><script><block s="doAddToList"><block s="reportBoolean"><l><bool>true</bool></l></block><block var="total difference"/></block></script><list><block s="reportVariadicAnd"><list><block s="reportVariadicNotEquals"><list><block s="reportListItem"><block var="i"/><block var="getA"/></block><block s="reportListItem"><block var="i"/><block var="getB"/></block></list></block><block s="reportVariadicOr"><list><block s="reportVariadicNotEquals"><list><block s="reportListItem"><block var="i"/><block var="getA"/></block><block s="reportNewList"><list><l>0</l><l>0</l><l>0</l><l>0</l></list></block></list></block><block s="reportVariadicNotEquals"><list><block s="reportListItem"><block var="i"/><block var="getB"/></block><block s="reportNewList"><list><l>0</l><l>0</l><l>0</l><l>0</l></list></block></list></block></list></block></list></block><script><block s="doAddToList"><block s="reportBoolean"><l><bool>true</bool></l></block><block var="total difference"/></block></script></list></block></script></block><block s="doReport"><block s="reportVariadicOr"><list><block s="reportVariadicLessThan"><list><block s="reportListAttribute"><l><option>length</option></l><block var="total difference"/></block><l>100</l></list></block><block s="reportVariadicLessThan"><list><block s="reportMonadic"><l><option>abs</option></l><block s="reportDifference"><block s="reportListAttribute"><l><option>length</option></l><block var="getA"/></block><block s="reportListAttribute"><l><option>length</option></l><block var="getB"/></block></block></block><l>100</l></list></block></list></block></block></script><l>error</l><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></custom-block></script><scripts><script x="556.7958984375" y="162.83333333333337"><custom-block s="all in list contain value= %s list= %l" scope="local"><l>0</l><l/></custom-block></script><script x="602.6318359375" y="214.8333333333334"><custom-block s="all in list contain value= %s list= %l" scope="local"><l>0</l><block var="getB"/></custom-block></script><script x="523.080078125" y="90.66666666666664"><block var="getA"/></script><script x="579.046875" y="711.7"><block s="reportVariadicNotEquals"><list><block s="reportListItem"><block var="i"/><block var="getA"/></block><block s="reportListItem"><block var="i"/><block var="getB"/></block></list></block></script><script x="841.044921875" y="730.5333333333333"><block var="getA"/></script><script x="411" y="779.6666666666665"><block s="reportVariadicOr"><list><block s="reportVariadicLessThan"><list><l></l><l>300</l></list></block><block s="reportVariadicLessThan"><list><block s="reportMonadic"><l><option>abs</option></l><block s="reportDifference"><block s="reportListAttribute"><l><option>length</option></l><block var="emptyA"/></block><block s="reportListAttribute"><l><option>length</option></l><block var="emptyB"/></block></block></block><l>100</l></list></block></list></block></script><script x="613.99853515625" y="68.69999999999999"><block s="reportNot"><l/></block></script><script x="720.69140625" y="116.16666666666659"><block s="reportNot"><l/></block></script><script x="748" y="385.1666666666669"><block s="reportVariadicAnd"><list><l/><l/></list></block></script><script x="723.2119140625" y="326.00000000000017"><block s="reportListItem"><block var="i"/><block var="getA"/></block></script><script x="865.3076171875" y="305.00000000000017"><block s="reportListItem"><block var="i"/><block var="getB"/></block></script><script x="607.2119140625" y="273.00000000000017"><block s="reportMonadic"><l><option>abs</option></l><l></l></block></script><script x="711.8837890625" y="299.00000000000017"><block s="reportMonadic"><l><option>abs</option></l><l></l></block></script><script x="987.3115234375" y="442.83333333333366"><block var="getA"/></script></scripts></block-definition><block-definition s="all in list contain value= %&apos;value&apos; list= %&apos;list&apos;" type="predicate" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%l"></input></inputs><script><block s="doReport"><custom-block s="if %b then %anyUE else %anyUE"><block s="reportIsA"><block var="list"/><l><option>list</option></l></block><block s="reportListIsEmpty"><block s="reportKeep"><block s="reifyPredicate"><autolambda><block s="reportVariadicNotEquals"><list><l></l><block var="value"/></list></block></autolambda><list></list></block><block var="list"/></block></block><block s="reportBoolean"><l><bool>true</bool></l></block></custom-block></block></script></block-definition><block-definition s="Test: factorial ITERATIVE %&apos;block&apos;" type="reporter" category="tests"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>all data</l><l>inputs</l><l>solutions</l><l>run test</l></list></block><block s="doSetVar"><l>all data</l><block s="reportNewList"><list><block s="reportNewList"><list><l>1</l><l>0</l></list></block><block s="reportNewList"><list><l>120</l><l>5</l></list></block><block s="reportNewList"><list><l>24</l><l>4</l></list></block><block s="reportNewList"><list><l>720</l><l>6</l></list></block></list></block></block><block s="doSetVar"><l>inputs</l><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportListItem"><l>2</l><l/></block></autolambda><list></list></block><block var="all data"/></block></block><block s="doSetVar"><l>solutions</l><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportListItem"><l>1</l><l/></block></autolambda><list></list></block><block var="all data"/></block></block><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doSetVar"><l>run test</l><custom-block s="1. %repRing equals %s on %l" scope="local"><block var="block"/><block var="solutions"/><block var="inputs"/></custom-block></block><block s="doIfElse"><block s="reportListItem"><l>1</l><block var="run test"/></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></block></script><l>error</l><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><block var="error"/></list></block></block></script></custom-block></script></block-definition><block-definition s="Test: factorial RECURSIVE %&apos;block&apos;" type="reporter" category="tests"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>all data</l><l>inputs</l><l>solutions</l><l>run test</l></list></block><block s="doSetVar"><l>all data</l><block s="reportNewList"><list><block s="reportNewList"><list><l>1</l><l>0</l></list></block><block s="reportNewList"><list><l>120</l><l>5</l></list></block><block s="reportNewList"><list><l>24</l><l>4</l></list></block><block s="reportNewList"><list><l>720</l><l>6</l></list></block></list></block></block><block s="doSetVar"><l>inputs</l><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportListItem"><l>2</l><l/></block></autolambda><list></list></block><block var="all data"/></block></block><block s="doSetVar"><l>solutions</l><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportListItem"><l>1</l><l/></block></autolambda><list></list></block><block var="all data"/></block></block><custom-block s="safely try %cs then if %upvar %cs"><script><block s="doSetVar"><l>run test</l><custom-block s="1. %repRing equals %s on %l" scope="local"><block var="block"/><block var="solutions"/><block var="inputs"/></custom-block></block><block s="doIf"><custom-block s="constraints: recursion %s" scope="local"><block var="block"/></custom-block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Solution MUST use recursion</l></list></block></block></script><list><l><bool>true</bool></l><script><block s="doIfElse"><block s="reportListItem"><l>1</l><block var="run test"/></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><l>Test failed.</l></list></block></block></script></block></script></list></block></script><l>error</l><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><block var="error"/></list></block></block></script></custom-block></script></block-definition><block-definition s="1. %&apos;f&apos; equals %&apos;solution&apos; on %&apos;inputs&apos;" type="predicate" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%repRing"></input><input type="%s"></input><input type="%l"></input></inputs><script><block s="doFor"><l>i</l><l>1</l><block s="reportListAttribute"><l><option>length</option></l><block var="inputs"/></block><script><block s="doIfElse"><block s="reportIsA"><block s="reportListItem"><block var="i"/><block var="inputs"/></block><l><option>list</option></l></block><script><block s="doIf"><block s="reportVariadicNotEquals"><list><block s="evaluate"><block var="f"/><list><block s="reportListItem"><l>1</l><block s="reportListItem"><block var="i"/><block var="inputs"/></block></block><block s="reportListItem"><l>2</l><block s="reportListItem"><block var="i"/><block var="inputs"/></block></block></list></block><block s="reportListItem"><block var="i"/><block var="solution"/></block></list></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><custom-block s="format message %s %s %s" scope="local"><block s="reportListItem"><block var="i"/><block var="inputs"/></block><block s="reportListItem"><block var="i"/><block var="solution"/></block><block s="evaluate"><block var="f"/><list><block s="reportListItem"><l>1</l><block s="reportListItem"><block var="i"/><block var="inputs"/></block></block><block s="reportListItem"><l>2</l><block s="reportListItem"><block var="i"/><block var="inputs"/></block></block></list></block></custom-block></list></block></block></script><list></list></block></script><script><block s="doIf"><block s="reportVariadicNotEquals"><list><block s="evaluate"><block var="f"/><list><block s="reportListItem"><block var="i"/><block var="inputs"/></block></list></block><block s="reportListItem"><block var="i"/><block var="solution"/></block></list></block><script><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>false</bool></l></block><custom-block s="format message %s %s %s" scope="local"><block s="reportListItem"><block var="i"/><block var="inputs"/></block><block s="reportListItem"><block var="i"/><block var="solution"/></block><block s="evaluate"><block var="f"/><list><block s="reportListItem"><block var="i"/><block var="inputs"/></block></list></block></custom-block></list></block></block></script><list></list></block></script></block></script></block><block s="doReport"><block s="reportNewList"><list><block s="reportBoolean"><l><bool>true</bool></l></block><l>Test passed!</l></list></block></block></script><scripts><script x="387.4883593750001" y="44.83333333333335"><block s="reportListItem"><l>1</l><l/></block></script></scripts></block-definition><block-definition s="format message %&apos;input&apos; %&apos;solution&apos; %&apos;output&apos;" type="reporter" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="reportJoinWords"><list><l>Test failed. | Input(s): </l><custom-block s="format input/output %s" scope="local"><block var="input"/></custom-block><l> | Expected: </l><custom-block s="format input/output %s" scope="local"><block var="solution"/></custom-block><l> | </l><l>Actual: </l><custom-block s="format input/output %s" scope="local"><block var="output"/></custom-block><l> | Expected Data Type: </l><custom-block s="data type of %s" scope="local"><block var="solution"/></custom-block><l> | Actual Data Type: </l><custom-block s="data type of %s" scope="local"><block var="output"/></custom-block></list></block></block></script></block-definition><block-definition s="format input/output %&apos;input&apos;" type="reporter" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doIf"><block s="reportIsA"><block var="input"/><l><option>list</option></l></block><script><block s="doIfElse"><block s="reportVariadicGreaterThanOrEquals"><list><l>1</l><block s="reportListAttribute"><l><option>length</option></l><block var="input"/></block></list></block><script><block s="doReport"><block s="reportJoinWords"><list><l>[</l><block var="input"/><l>]</l></list></block></block></script><script><block s="doDeclareVariables"><list><l>output</l></list></block><block s="doSetVar"><l>output</l><l>[</l></block><block s="doFor"><l>i</l><l>1</l><block s="reportListAttribute"><l><option>length</option></l><block var="input"/></block><script><block s="doSetVar"><l>output</l><block s="reportIfElse"><block s="reportVariadicEquals"><list><block var="i"/><block s="reportListAttribute"><l><option>length</option></l><block var="input"/></block></list></block><block s="reportJoinWords"><list><block var="output"/><l>, </l><block s="reportListItem"><block var="i"/><block var="input"/></block><l>]</l></list></block><block s="reportJoinWords"><list><block var="output"/><block s="reportIfElse"><block s="reportVariadicEquals"><list><block var="i"/><l>1</l></list></block><l></l><l>, </l></block><block s="reportListItem"><block var="i"/><block var="input"/></block></list></block></block></block></script></block><block s="doReport"><block var="output"/></block></script></block></script><list></list></block><block s="doReport"><block var="input"/></block></script></block-definition><block-definition s="data type of %&apos;input&apos;" type="reporter" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doIfElse"><block s="reportIsA"><block var="input"/><l><option>number</option></l></block><script><block s="doReport"><l>Number</l></block></script><script><block s="doIfElse"><block s="reportIsA"><block var="input"/><l><option>text</option></l></block><script><block s="doReport"><l>Text</l></block></script><script><block s="doIfElse"><block s="reportIsA"><block var="input"/><l><option>list</option></l></block><script><block s="doReport"><l>List</l></block></script><script><block s="doIfElse"><block s="reportIsA"><block var="input"/><l><option>predicate</option></l></block><script><block s="doReport"><l>Predicate</l></block></script><script><block s="doIfElse"><block s="reportIsA"><block var="input"/><l><option>reporter</option></l></block><script><block s="doReport"><l>Reporter Function</l></block></script><script><block s="doReport"><l>Error!</l></block></script></block></script></block></script></block></script></block></script></block></script></block-definition><block-definition s="grade" type="reporter" category="Autograder"><comment x="0" y="0" w="127" collapsed="false">Return a string in the Gradescope JSON format:&#xD;    {&quot;tests&quot;: [&#xD;        &lt;test 1&gt;,&#xD;        &lt;test 2&gt;,&#xD;        ...&#xD;    ]}&#xD;&#xD;See the &quot;format&quot; reporter under Autograder Utils.</comment><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>test results</l><l>score</l><l>max score</l></list></block><block s="doSetVar"><l>test results</l><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="run %l waiting up to %n seconds" scope="local"><l/><l>360</l></custom-block></autolambda><list></list></block><block var="tests"/></block></block><block s="doSetVar"><l>score</l><block s="reportCombine"><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportListItem"><l>2</l><block s="reportListItem"><l>2</l><l/></block></block></autolambda><list></list></block><block s="reportTextSplit"><block var="test results"/><l><option>json</option></l></block></block><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l></l></list></block></autolambda><list></list></block></block></block><block s="doSetVar"><l>max score</l><block s="reportCombine"><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportListItem"><l>2</l><block s="reportListItem"><l>3</l><l/></block></block></autolambda><list></list></block><block s="reportTextSplit"><block var="test results"/><l><option>json</option></l></block></block><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l></l></list></block></autolambda><list></list></block></block></block><block s="doReport"><block s="reportJoinWords"><list><l>{"gradable":true,"score":</l><block s="reportQuotient"><block var="score"/><block var="max score"/></block><l>,</l><block s="reportJoinWords"><list><l>"tests":[</l><block s="reportCombine"><block var="test results"/><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><l></l><l>,</l><l></l></list></block></autolambda><list></list></block></block><l>]}</l></list></block></list></block></block></script><scripts><script x="431.96000000000004" y="148.25000000000006"><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportListItem"><l>2</l><l/></block></autolambda><list></list></block><l/></block></script></scripts></block-definition><block-definition s="run %&apos;data for one test&apos; waiting up to %&apos;wait seconds&apos; seconds" type="reporter" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%l"></input><input type="%n">5</input></inputs><script><block s="doDeclareVariables"><list><l>run test?</l><l>test block</l><l>test name</l><l>max score</l></list></block><block s="doSetVar"><l>run test?</l><block s="reportListItem"><l>1</l><block var="data for one test"/></block></block><block s="doSetVar"><l>test block</l><block s="reportListItem"><l>2</l><block var="data for one test"/></block></block><block s="doSetVar"><l>test name</l><block s="reportBlockAttribute"><l><option>label</option></l><block var="test block"/></block></block><block s="doSetVar"><l>max score</l><block s="reportListItem"><l>3</l><block var="data for one test"/></block></block><block s="doIf"><block s="reportNot"><block var="run test?"/></block><script><block s="doReport"><custom-block s="format: score earned= %n , max score= %n , name= %txt , message= %txt" scope="local"><l>0</l><block var="max score"/><block var="test name"/><l>Test skipped.</l></custom-block></block></script><list></list></block><block s="doDeclareVariables"><list><l>test result</l></list></block><block s="doSetVar"><l>test result</l><block s="reportNewList"><list></list></block></block><block s="doResetTimer"></block><block s="fork"><block s="reifyScript"><script><block s="doSetVar"><l>test result</l><block s="evaluate"><block var="test block"/><list></list></block></block></script><list></list></block><list></list></block><block s="doWaitUntil"><block s="reportVariadicOr"><list><block s="reportNot"><block s="reportListIsEmpty"><block var="test result"/></block></block><block s="reportVariadicGreaterThan"><list><block s="getTimer"></block><block var="wait seconds"/></list></block></list></block></block><block s="doStopThis"><l><option>all but this script</option></l></block><block s="doIf"><block s="reportListIsEmpty"><block var="test result"/></block><script><block s="doReport"><custom-block s="format: score earned= %n , max score= %n , name= %txt , message= %txt" scope="local"><l>0</l><block var="max score"/><block var="test name"/><l>Test timed out.</l></custom-block></block></script><list></list></block><block s="doDeclareVariables"><list><l>test passed?</l><l>feedback</l><l>score earned</l></list></block><block s="doSetVar"><l>test passed?</l><block s="reportListItem"><l>1</l><block var="test result"/></block></block><block s="doSetVar"><l>feedback</l><block s="reportListItem"><l>2</l><block var="test result"/></block></block><block s="doSetVar"><l>score earned</l><block s="reportVariadicProduct"><list><block var="test passed?"/><block var="max score"/></list></block></block><block s="doChangeVar"><l>score</l><block var="score earned"/></block><block s="doReport"><custom-block s="format: score earned= %n , max score= %n , name= %txt , message= %txt" scope="local"><block var="score earned"/><block var="max score"/><block var="test name"/><block var="feedback"/></custom-block></block></script></block-definition><block-definition s="format: score earned= %&apos;earned&apos; , max score= %&apos;max score&apos; , name= %&apos;name&apos; , message= %&apos;message&apos;" type="reporter" category="Autograder Utils"><header></header><code></code><translations></translations><inputs><input type="%n">0</input><input type="%n">0</input><input type="%txt"></input><input type="%txt"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>earned</l><l>total</l><l>name</l><l>message</l></list><l>    return JSON.stringify({&#xD;        "name": name.replaceAll(" _", ""),&#xD;        "points": parseFloat(earned),&#xD;        "max_points": parseFloat(total),&#xD;        "output": message&#xD;    });</l></block><list><block var="earned"/><block var="max score"/><block var="name"/><block var="message"/></list></block></block></script></block-definition></blocks><variables><variable name="tests"><list id="3951"><item><list id="3952"><item><bool>false</bool></item><item><l>0</l></item><item><l>5</l></item></list></item><item><list id="3953"><item><bool>false</bool></item><item><l>0</l></item><item><l>5</l></item></list></item><item><list id="3954"><item><bool>false</bool></item><item><l>0</l></item><item><l>5</l></item></list></item></list></variable><variable name="student"><l></l></variable><variable name="results"><l></l></variable><variable name="secret number"><l>51</l></variable><variable name="fractal matches exactly?"><bool>true</bool></variable><variable name="recursively called?"><bool>false</bool></variable><variable name="score"><l>214.50000000000009</l></variable></variables><scripts><script x="35" y="167"><block s="receiveMessage"><l>run autograder</l><list></list></block><custom-block s="set up autograder" scope="local"><comment w="340" collapsed="false">Set up autograder initializes the global variables:&#xD;&#xD;1. all the functions/blocks the student created that we are testing for&#xD;2. the tests themselves, and the final JSON string we will be outputing</comment></custom-block><block s="doSetVar"><l>results</l><custom-block s="grade" scope="local"></custom-block></block><block s="doStopThis"><l><option>all</option></l></block></script><comment x="10" y="10" w="408" collapsed="false">Metadata such as &quot;secret number&quot; should have been initialized by the JS autograder script, so they can be treated as ready to use (even though their current value might show &quot;0&quot;). You won&apos;t need this for autograding labs. &#xD;&#xD;Make new variables and blocks FOR THIS SPRITE ONLY.&#xD;&#xD;Export this Sprite—not the project!</comment><script x="1046.7453515624998" y="686.4666666666667"><block var="block"/></script><script x="907.9133203124998" y="517.1333333333337"><block var="secret number"/></script><script x="742" y="798"><custom-block s="%cmdRing equals %cmdRing under %repRing" scope="local"><block s="reifyScript"><script></script><list></list></block><block s="reifyScript"><script><custom-block s="Midterm Fractal n= %s steps len= %s version= %s" scope="local"><l></l><l></l><block var="secret number"/></custom-block></script><list></list></block><block s="reifyReporter"><autolambda><custom-block s="get pixels of %cmdRing with n= %n length= %s waiting %n second(s)" scope="local"><block s="reifyScript"><script></script><list></list></block><l>1</l><l>50</l><l>10</l></custom-block></autolambda><list></list></block></custom-block></script><script x="797.483359375" y="602.8333333333333"><block var="getA"/></script><script x="727.483359375" y="608.8333333333333"><block var="getB"/></script><script x="673.5632290449769" y="299.16666666666686"><block var="sub1"/></script><script x="724.0929165449764" y="267.0000000000002"><block var="sub2"/></script><script x="33.30240234375003" y="339.0999999999997"><block s="doSetVar"><l>tests</l><block s="reportNewList"><list><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: correct fractal drawing %s" scope="local"><block s="reportListItem"><l>1</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>5</l></list></block><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: correct base case condition %s" scope="local"><block s="reportListItem"><l>1</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>2</l></list></block><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: correct base case drawing %s" scope="local"><block s="reportListItem"><l>1</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>2</l></list></block><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: correct number of recursive calls %s" scope="local"><block s="reportListItem"><l>1</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>2</l></list></block><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: correct recursive inputs %s" scope="local"><block s="reportListItem"><l>1</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>2</l></list></block><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: correct final sprite direction %s" scope="local"><block s="reportListItem"><l>1</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>2</l></list></block><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: factorial RECURSIVE %s" scope="local"><block s="reportListItem"><l>2</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>10</l></list></block><block s="reportNewList"><list><block var="try running?"/><block s="reifyReporter"><autolambda><custom-block s="Test: factorial ITERATIVE %s" scope="local"><block s="reportListItem"><l>3</l><block var="student"/></block></custom-block></autolambda><list></list></block><l>10</l></list></block></list></block></block></script></scripts></sprite></sprites>